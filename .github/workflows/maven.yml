# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build and Test with Coverage
      run: mvn -B clean test jacoco:report --file pom.xml
    
    - name: Build Package
      run: mvn -B package --file pom.xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
    
    - name: Upload coverage reports to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          target/site/jacoco/
          target/site/jacoco/jacoco.xml
        retention-days: 30

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@v1

  coverage:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
    
    - name: Comment PR with coverage
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const coveragePath = path.join(process.env.GITHUB_WORKSPACE, 'coverage', 'target', 'site', 'jacoco', 'index.html');
            if (fs.existsSync(coveragePath)) {
              const coverageContent = fs.readFileSync(coveragePath, 'utf8');
              const match = coverageContent.match(/Total\s*<\/td>\s*<td[^>]*>(\d+(?:\.\d+)?)%/);
              const coverage = match ? match[1] : 'N/A';
              
              const comment = `## ðŸ“Š Code Coverage Report
              
              **Coverage: ${coverage}%**
              
              Coverage reports are available as artifacts in the build job.
              View detailed reports in the Actions tab.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not generate coverage comment:', error.message);
          }
    
    - name: Generate coverage badge
      run: |
        # Extract coverage percentage from JaCoCo report
        if [ -f "coverage/target/site/jacoco/index.html" ]; then
          COVERAGE=$(grep -o 'Total.*[0-9]\+\.[0-9]\+%' coverage/target/site/jacoco/index.html | grep -o '[0-9]\+\.[0-9]\+%' | head -1)
          if [ -n "$COVERAGE" ]; then
            # Create badge using shields.io
            BADGE_URL="https://img.shields.io/badge/coverage-${COVERAGE}-brightgreen?style=flat&logo=java"
            echo "Coverage: $COVERAGE"
            echo "Badge URL: $BADGE_URL"
            
            # Update README with coverage badge
            if [ -f "README.md" ]; then
              # Remove existing coverage badge if present
              sed -i.bak '/!\[coverage\]/d' README.md
              sed -i.bak '/\[coverage\]:/d' README.md
              
              # Add new coverage badge at the top
              sed -i.bak "1i\\
              ![coverage]($BADGE_URL)\\
              \\
              [coverage]: $BADGE_URL\\
              " README.md
              
              # Commit and push changes
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add README.md
              git commit -m "Update coverage badge: $COVERAGE" || echo "No changes to commit"
              git push || echo "Could not push changes"
            fi
          fi
        fi
