# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build and Test with Coverage
      run: mvn -B clean test jacoco:report --file pom.xml
    
    - name: Debug JaCoCo Report
      run: |
        echo "=== JaCoCo Report Debug ==="
        if [ -f "target/site/jacoco/index.html" ]; then
          echo "✅ JaCoCo report exists at target/site/jacoco/index.html"
          echo "📏 File size: $(ls -lh target/site/jacoco/index.html | awk '{print $5}')"
          echo "📅 Last modified: $(ls -la target/site/jacoco/index.html | awk '{print $6, $7, $8}')"
          echo ""
          echo "=== First 20 lines of JaCoCo report ==="
          head -20 target/site/jacoco/index.html
          echo ""
          echo "=== Looking for coverage patterns ==="
          echo "Pattern 1 (Total coverage):"
          grep -o 'Total.*[0-9]\+\.[0-9]\+%' target/site/jacoco/index.html || echo "No match found"
          echo ""
          echo "Pattern 2 (Any percentage):"
          grep -o '[0-9]\+\.[0-9]\+%' target/site/jacoco/index.html | head -5 || echo "No match found"
          echo ""
          echo "Pattern 3 (Coverage text):"
          grep -i 'coverage' target/site/jacoco/index.html | head -3 || echo "No match found"
        else
          echo "❌ JaCoCo report NOT found at target/site/jacoco/index.html"
          echo "📁 Contents of target/site/jacoco/:"
          ls -la target/site/jacoco/ 2>/dev/null || echo "Directory does not exist"
          echo ""
          echo "📁 Contents of target/site/:"
          ls -la target/site/ 2>/dev/null || echo "Directory does not exist"
        fi
        echo "=== End Debug ==="
    
    - name: Build Package
      run: mvn -B package --file pom.xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
    
    - name: Upload coverage reports to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          target/site/jacoco/
          target/site/jacoco/jacoco.xml
        retention-days: 30
    
    - name: Create GitHub coverage report
      run: |
        # Create a GitHub-friendly coverage report
        if [ -f "target/site/jacoco/index.html" ]; then
          COVERAGE=$(grep -o 'Total.*[0-9]\+%' target/site/jacoco/index.html | grep -o '[0-9]\+%' | head -1)
          
          # Create a comprehensive coverage report for GitHub
          cat > docs/COVERAGE_REPORT.md << EOF
        # 🎯 Code Coverage Report
        
        ## 📊 Current Status
        
        | Metric | Value |
        |--------|-------|
        | **Overall Coverage** | **${COVERAGE}** |
        | **Last Build** | [Run #${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
        | **Branch** | `${{ github.ref_name }}` |
        | **Commit** | [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) |
        | **Last Updated** | $(date -u +"%Y-%m-%d %H:%M UTC") |
        
        ## 🔗 Quick Access
        
        - **📋 [View Latest Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**
        - **📥 [Download Full Coverage Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**
        - **📊 [View All Actions](https://github.com/${{ github.repository }}/actions)**
        - **📋 [Coverage Status](https://github.com/${{ github.repository }}/blob/main/docs/COVERAGE_STATUS.md)** - Quick overview page
        
        ## 📁 Available Artifacts
        
        | Artifact | Description | Size |
        |----------|-------------|------|
        | `coverage-reports` | Full JaCoCo HTML & XML reports | ~2-5 MB |
        | `coverage-summary` | Basic summary file | ~1 KB |
        | `coverage-status` | Status with clickable badge | ~1 KB |
        
        ## 🎨 Coverage Badge
        
        [![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}-brightgreen?style=flat&logo=java)](https://github.com/${{ github.repository }}/blob/main/docs/COVERAGE_STATUS.md)
        
        > **💡 Click the badge above to go to the coverage status page!**
        
        ## 📈 Coverage Trends
        
        Coverage is tracked across all builds. View historical data in the Actions tab.
        
        ## 🔍 How to View Detailed Coverage
        
        1. **Click the coverage badge** above to go to the coverage status page
        2. **Download the \`coverage-reports\` artifact** from the Actions page
        3. **Extract and open** \`target/site/jacoco/index.html\` in your browser
        
        ## 📋 Navigation
        
        - **🏠 [Coverage Status](https://github.com/${{ github.repository }}/blob/main/docs/COVERAGE_STATUS.md)** - Main coverage page
        - **📊 [Coverage Summary](https://github.com/${{ github.repository }}/blob/main/docs/COVERAGE_SUMMARY.md)** - Quick overview
        - **🚀 [Latest Build](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Download artifacts
        
        ---
        *🔄 Updated automatically on every build*
        EOF
        
          echo "GitHub coverage report created: docs/COVERAGE_REPORT.md"
        fi
    
    - name: Create coverage summary
      run: |
        # Create a coverage summary file that can be viewed in GitHub
        if [ -f "target/site/jacoco/index.html" ]; then
          COVERAGE=$(grep -o 'Total.*[0-9]\+%' target/site/jacoco/index.html | grep -o '[0-9]\+%' | head -1)
          
          # Create a markdown summary that works well in GitHub
          cat > docs/COVERAGE_SUMMARY.md << EOF
        # 📊 Code Coverage Summary
        
        **Current Coverage: ${COVERAGE}**
        
        ## 📁 Coverage Reports
        
        - **HTML Report**: Available as artifact in GitHub Actions
        - **XML Report**: Available as artifact in GitHub Actions
        - **Last Updated**: $(date -u +"%Y-%m-%d %H:%M UTC")
        
        ## 🔍 How to View Coverage
        
        1. Go to [GitHub Actions](https://github.com/${{ github.repository }}/actions)
        2. Click on the latest workflow run
        3. Download the \`coverage-reports\` artifact
        4. Open \`target/site/jacoco/index.html\` in your browser
        
        ## 📈 Coverage History
        
        Coverage reports are generated on every build and stored as artifacts.
        View the Actions tab for historical coverage data.
        
        ## 🔗 Related Files
        
        - **📊 [Full Coverage Report](https://github.com/${{ github.repository }}/blob/main/docs/COVERAGE_REPORT.md)**
        - **📋 [Coverage Status](https://github.com/${{ github.repository }}/blob/main/docs/COVERAGE_STATUS.md)**
        
        ---
        *Generated automatically by GitHub Actions*
        EOF
        
          echo "Coverage summary created: docs/COVERAGE_SUMMARY.md"
        fi
    
    - name: Create coverage status badge
      run: |
        # Create a coverage status badge that links to GitHub Actions
        if [ -f "target/site/jacoco/index.html" ]; then
          echo "JaCoCo report found, extracting coverage..."
          
          # Try multiple patterns to extract coverage percentage
          COVERAGE=""
          
          # Pattern 1: Look for Total coverage in the HTML footer (most reliable)
          COVERAGE=$(grep -o 'Total.*[0-9]\+%' target/site/jacoco/index.html | grep -o '[0-9]\+%' | head -1)
          
          # Pattern 2: Look for any percentage in the HTML
          if [ -z "$COVERAGE" ]; then
            COVERAGE=$(grep -o '[0-9]\+%' target/site/jacoco/index.html | head -1)
          fi
          
          # Pattern 3: Look for coverage in the title or headers
          if [ -z "$COVERAGE" ]; then
            COVERAGE=$(grep -i 'coverage.*[0-9]\+%' target/site/jacoco/index.html | grep -o '[0-9]\+%' | head -1)
          fi
          
          # If still no coverage found, use a default value
          if [ -z "$COVERAGE" ]; then
            COVERAGE="N/A"
            echo "Warning: Could not extract coverage percentage, using N/A"
          else
            echo "Coverage extracted: $COVERAGE"
          fi
          
          # Create a status badge that links to the workflow run
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Create a simple status file that can be used for badges
          cat > docs/COVERAGE_STATUS.md << EOF
        # 📊 Coverage Status
        
        **Current Coverage: ${COVERAGE}**
        
        [![Coverage Status](https://img.shields.io/badge/coverage-${COVERAGE}-brightgreen?style=flat&logo=java)](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        > **Click the badge above to view detailed coverage reports in GitHub Actions**
        
        ## 📁 Available Reports
        
        - **📊 [Full Coverage Report](https://github.com/${{ github.repository }}/blob/main/docs/COVERAGE_REPORT.md)** - Comprehensive coverage analysis
        - **📋 [Coverage Summary](https://github.com/${{ github.repository }}/blob/main/docs/COVERAGE_SUMMARY.md)** - Quick overview
        - **🔗 [GitHub Actions](https://github.com/${{ github.repository }}/actions)** - Download detailed reports
        - **📥 [Latest Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Current build artifacts
        
        ## 🎯 Quick Actions
        
        - **View Coverage Report**: [📊 COVERAGE_REPORT.md](https://github.com/${{ github.repository }}/blob/main/docs/COVERAGE_REPORT.md)
        - **Download Artifacts**: [🚀 Latest Build](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - **View All Actions**: [📋 Actions History](https://github.com/${{ github.repository }}/actions)
        
        ## 📈 Coverage Details
        
        | Metric | Value |
        |--------|-------|
        | **Current Coverage** | **${COVERAGE}** |
        | **Last Build** | [Run #${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
        | **Branch** | `${{ github.ref_name }}` |
        | **Last Updated** | $(date -u +"%Y-%m-%d %H:%M UTC") |
        
        ---
        *🔄 Updated automatically on every build*
        EOF
        
          echo "Coverage status created: docs/COVERAGE_STATUS.md"
        else
          echo "Warning: JaCoCo report not found at target/site/jacoco/index.html"
          # Create a fallback coverage status file
          cat > docs/COVERAGE_STATUS.md << EOF
        # 📊 Coverage Status
        
        **Current Coverage: N/A (Report not found)**
        
        > **Coverage report could not be generated. Check the workflow logs for details.**
        
        ## 📁 Available Reports
        
        - **🔗 [GitHub Actions](https://github.com/${{ github.repository }}/actions)** - View workflow logs
        - **📥 [Latest Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Current build
        
        ---
        *⚠️ Coverage report generation failed*
        EOF
        fi
    
    - name: Commit coverage reports to repository
      run: |
        # Create docs directory if it doesn't exist
        mkdir -p docs
        
        # Add and commit coverage reports to the repository
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/COVERAGE_REPORT.md docs/COVERAGE_SUMMARY.md docs/COVERAGE_STATUS.md
        git commit -m "Update coverage reports: ${COVERAGE}% coverage" || echo "No changes to commit"
        git push || echo "Could not push changes"
    
    - name: Update README with coverage badge
      run: |
        # Extract coverage percentage from JaCoCo report
        if [ -f "target/site/jacoco/index.html" ]; then
          COVERAGE=$(grep -o 'Total.*[0-9]\+\.[0-9]\+%' target/site/jacoco/index.html | grep -o '[0-9]\+\.[0-9]\+%' | head -1)
          if [ -n "$COVERAGE" ]; then
            # Create badge using shields.io
            BADGE_URL="https://img.shields.io/badge/Coverage-${COVERAGE}-brightgreen.svg"
            echo "Coverage: $COVERAGE"
            echo "Badge URL: $BADGE_URL"
            
            # Create clickable link to the coverage status file in docs
            COVERAGE_STATUS_URL="https://github.com/${{ github.repository }}/blob/main/docs/COVERAGE_STATUS.md"
            COVERAGE_LINK="[![Coverage]($BADGE_URL)]($COVERAGE_STATUS_URL)"
            
            # Update README with clickable coverage badge
            if [ -f "README.md" ]; then
              # Remove existing coverage badge if present (handle both formats)
              sed -i.bak '/!\[Coverage\].*github\.com.*gqlex-path-selection-java/d' README.md
              sed -i.bak '/\[Coverage\].*github\.com.*gqlex-path-selection-java/d' README.md
              
              # Add new clickable coverage badge at the top (after the title)
              sed -i.bak "1a\\
              \\
              $COVERAGE_LINK\\
              \\
              > 📊 **Click the coverage badge above to view the coverage status page**\\
              " README.md
              
              # Commit and push changes
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add README.md
              git commit -m "Update coverage badge: $COVERAGE% coverage - links to coverage status page" || echo "No changes to commit"
              git push || echo "Could not push changes"
            fi
          fi
        fi

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@v1

  coverage:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const coveragePath = path.join(process.env.GITHUB_WORKSPACE, 'coverage', 'target', 'site', 'jacoco', 'index.html');
            if (fs.existsSync(coveragePath)) {
              const coverageContent = fs.readFileSync(coveragePath, 'utf8');
              const match = coverageContent.match(/Total\s*<\/td>\s*<td[^>]*>(\d+(?:\.\d+)?)%/);
              const coverage = match ? match[1] : 'N/A';
              
              const comment = `## 📊 Code Coverage Report
              
              **Coverage: ${coverage}%**
              
              Coverage reports are available as artifacts in the build job.
              View detailed reports in the Actions tab.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not generate coverage comment:', error.message);
          }
