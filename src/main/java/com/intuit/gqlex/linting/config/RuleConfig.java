package com.intuit.gqlex.linting.config;

import com.intuit.gqlex.linting.core.LintLevel;

/**
 * Configuration for an individual linting rule.
 * 
 * <p>This class encapsulates the configuration for a single linting rule,
 * including whether it's enabled and what level it should operate at.</p>
 * 
 * @author gqlex
 * @version 2.0.1
 * @since 2.0.1
 */
public class RuleConfig {
    private final boolean enabled;
    private final LintLevel level;

    /**
     * Creates a new rule configuration.
     * 
     * @param enabled whether the rule is enabled
     * @param level the level for issues generated by this rule
     */
    public RuleConfig(boolean enabled, LintLevel level) {
        this.enabled = enabled;
        this.level = level != null ? level : LintLevel.WARNING;
    }

    /**
     * Creates a new rule configuration with WARNING level.
     * 
     * @param enabled whether the rule is enabled
     */
    public RuleConfig(boolean enabled) {
        this(enabled, LintLevel.WARNING);
    }

    /**
     * Checks if this rule is enabled.
     * 
     * @return true if the rule is enabled, false otherwise
     */
    public boolean isEnabled() {
        return enabled;
    }

    /**
     * Gets the level for issues generated by this rule.
     * 
     * @return the lint level
     */
    public LintLevel getLevel() {
        return level;
    }

    @Override
    public String toString() {
        return String.format("RuleConfig{enabled=%s, level=%s}", enabled, level);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        
        RuleConfig that = (RuleConfig) obj;
        
        if (enabled != that.enabled) return false;
        return level == that.level;
    }

    @Override
    public int hashCode() {
        int result = (enabled ? 1 : 0);
        result = 31 * result + level.hashCode();
        return result;
    }
} 