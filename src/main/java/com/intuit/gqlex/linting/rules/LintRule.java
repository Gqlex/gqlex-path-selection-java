package com.intuit.gqlex.linting.rules;

import com.intuit.gqlex.linting.core.LintContext;
import com.intuit.gqlex.linting.core.LintResult;
import com.intuit.gqlex.linting.core.LintLevel;

/**
 * Base interface for all GraphQL linting rules.
 * 
 * <p>This interface defines the contract that all linting rules must implement.
 * Each rule is responsible for analyzing a GraphQL document and identifying
 * specific issues based on its criteria.</p>
 * 
 * <p>The linting system is completely generic and agnostic to any specific GraphQL schema,
 * working with any query, mutation, or subscription structure.</p>
 * 
 * @author gqlex
 * @version 2.0.1
 * @since 2.0.1
 */
public abstract class LintRule {
    protected final String name;
    protected final LintLevel level;
    protected final String description;

    /**
     * Creates a new linting rule with the specified properties.
     * 
     * @param name the name of the rule
     * @param level the default level for issues generated by this rule
     * @param description the description of what this rule checks
     */
    protected LintRule(String name, LintLevel level, String description) {
        this.name = name;
        this.level = level;
        this.description = description;
    }

    /**
     * Creates a new linting rule with WARNING level.
     * 
     * @param name the name of the rule
     * @param description the description of what this rule checks
     */
    protected LintRule(String name, String description) {
        this(name, LintLevel.WARNING, description);
    }

    /**
     * Performs the linting analysis on the given context and adds issues to the result.
     * 
     * <p>This method should be implemented by each rule to perform its specific analysis.
     * The rule should examine the GraphQL document in the context and add any issues
     * it finds to the result.</p>
     * 
     * @param context the linting context containing the document and configuration
     * @param result the result object to add issues to
     */
    public abstract void lint(LintContext context, LintResult result);

    /**
     * Gets the name of this rule.
     * 
     * @return the rule name
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the default level for issues generated by this rule.
     * 
     * @return the default level
     */
    public LintLevel getLevel() {
        return level;
    }

    /**
     * Gets the description of what this rule checks.
     * 
     * @return the rule description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Checks if this rule is enabled for the given context.
     * 
     * <p>This method can be overridden by subclasses to provide custom enabling logic
     * based on the context configuration or other factors.</p>
     * 
     * @param context the linting context
     * @return true if the rule should be executed, false otherwise
     */
    public boolean isEnabled(LintContext context) {
        if (context == null || context.getConfig() == null) {
            return true; // Default to enabled if no configuration
        }
        
        // Check if the rule is explicitly disabled in configuration
        Boolean enabled = context.getConfigValue(name + ".enabled", Boolean.class);
        if (enabled != null && !enabled) {
            return false;
        }
        
        return true;
    }

    /**
     * Gets the category of this rule.
     * 
     * <p>This method can be overridden by subclasses to provide a category
     * for grouping related rules.</p>
     * 
     * @return the rule category
     */
    public String getCategory() {
        return "GENERAL";
    }

    /**
     * Gets the severity level for this rule based on the context configuration.
     * 
     * @param context the linting context
     * @return the severity level for this rule
     */
    public LintLevel getSeverityLevel(LintContext context) {
        if (context == null || context.getConfig() == null) {
            return level; // Return default level if no configuration
        }
        
        // Check if a custom level is configured for this rule
        String levelName = context.getConfigValue(name + ".level", String.class);
        if (levelName != null) {
            try {
                return LintLevel.valueOf(levelName.toUpperCase());
            } catch (IllegalArgumentException e) {
                // Invalid level name, fall back to default
                return level;
            }
        }
        
        return level;
    }

    /**
     * Adds an issue to the result with the appropriate severity level.
     * 
     * @param context the linting context
     * @param result the result to add the issue to
     * @param message the issue message
     * @param node the GraphQL node that caused the issue
     */
    protected void addIssue(LintContext context, LintResult result, String message, graphql.language.Node node) {
        LintLevel severity = getSeverityLevel(context);
        
        switch (severity) {
            case ERROR:
                result.addError(name, message, node);
                break;
            case WARNING:
                result.addWarning(name, message, node);
                break;
            case INFO:
                result.addInfo(name, message, node);
                break;
        }
    }

    /**
     * Adds an issue to the result with a specific severity level.
     * 
     * @param result the result to add the issue to
     * @param message the issue message
     * @param node the GraphQL node that caused the issue
     * @param severity the severity level for this issue
     */
    protected void addIssue(LintResult result, String message, graphql.language.Node node, LintLevel severity) {
        switch (severity) {
            case ERROR:
                result.addError(name, message, node);
                break;
            case WARNING:
                result.addWarning(name, message, node);
                break;
            case INFO:
                result.addInfo(name, message, node);
                break;
        }
    }

    /**
     * Adds an error issue to the result.
     * 
     * @param result the result to add the issue to
     * @param message the issue message
     * @param node the GraphQL node that caused the issue
     */
    protected void addError(LintResult result, String message, graphql.language.Node node) {
        result.addError(name, message, node);
    }

    /**
     * Adds a warning issue to the result.
     * 
     * @param result the result to add the issue to
     * @param message the issue message
     * @param node the GraphQL node that caused the issue
     */
    protected void addWarning(LintResult result, String message, graphql.language.Node node) {
        result.addWarning(name, message, node);
    }

    /**
     * Adds an informational issue to the result.
     * 
     * @param result the result to add the issue to
     * @param message the issue message
     * @param node the GraphQL node that caused the issue
     */
    protected void addInfo(LintResult result, String message, graphql.language.Node node) {
        result.addInfo(name, message, node);
    }

    @Override
    public String toString() {
        return String.format("LintRule{name='%s', level=%s, category='%s', description='%s'}", 
            name, level, getCategory(), description);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        
        LintRule that = (LintRule) obj;
        
        if (!name.equals(that.name)) return false;
        if (level != that.level) return false;
        if (!description.equals(that.description)) return false;
        return getCategory().equals(that.getCategory());
    }

    @Override
    public int hashCode() {
        int result = name.hashCode();
        result = 31 * result + level.hashCode();
        result = 31 * result + description.hashCode();
        result = 31 * result + getCategory().hashCode();
        return result;
    }
} 